from django.shortcuts import render,redirect,reverse
from django.http import HttpResponse
from django.contrib import messages
from django.http import HttpResponse
from.forms import renew,reply
from.models import post,comment
from rest_framework.decorators import authentication_classes,permission_classes
from.serializer import commentcreateserializer,commentserializer,createserializer,homeserializer

@permission_classes(['IsAuthenticated'])
def create(request):
    if request.method == 'POST':
        title=request.POST.get('title')
        content=request.POST.get('content')
        pic=request.FILES.get('pic')
        new_post=post(author=request.user,image=pic)
        serializer=createserializer(post,data=request.POST)
        if serializer.is_valid():
            serializer.save()
            messages.success(request,'saved')
            return redirect('/')
        messages.success(request,'an error occured while saving this')
        return redirect('create')
    return render(request,'blog/create.html')

def home(request):
    try:
        all_post=post.objects.all().order_by('-id')
    except post.DoesNotExist:
        return HttpResponse('post does not exist')
    serilaizer=homeserializer(all_post,many=True)
    context={
        'posts':serializer.data
    }
    return render(request,'blog/home.html',context)

@permission_classes(['IsAuthenticated'])
def detail(request,id):
    try:
        detail_post=post.objects.get(id=id)
    except post.DoesNotExist:
        return HttpResponse('Does not exist')
    serializer=homeserializer(detail_post)
    context={
        'post':serializer.data
    }
    return render(request,'blog/detail.html',context)
@permission_classes(['IsAuthenticated'])
def delete(request,id):
    try:
        get_post=post.objects.get(id=id)
    except post.DoesNotExist:
        return HttpResponse('Post does not exist')
    if get_post.author=request.user:
        get_post.delete()
        return redirect('/')
    messages.success(request,'you do not have permission to do this')
    return redirect(reverse(detail,args=[id]))

@permission_classes(['IsAuthenticated'])
def update(request,id):
    try:
        get_post=post.objects.get(id=id)
    except post.DoesNotExist:
        return HttpResponse('Post does not exist')
    image=request.FILES.get('image')
    if get_post.author=request.user:
        gotten_post=get_post(author=request.user,image=image)
        serializer=createserializer(gotten_post,data=request.POST)
        if serializer.is_valid():
            serializer.save()
            messages.success(request,'saved')
            return redirect(reverse(detail,args=[id]))
        messages.success(request,'an error occured while updating this.try again')
        return redirect(reverse(update,args=[id]))
    return render(request,'blog/update.html')

@permission_classes(['IsAuthenticated'])
def comments(request,id):
    try:
        grab=post.objects.get(id=id)
        posts=comment.objects.filter(post=grab)
    except comment.DoesNotExist:
        return HttpResponse('post does not exist')
    serilaizer=commentserializer(posts,many=True)
    h_serilaizer=homeserializer(grab)
    context={
        'comment':serializer.data,
        'grab':h_serializer.data
    }
    return render(request,'blog/comment.html',context)
@permission_classes(['IsAuthenticated'])
def add_comment(request,id):
    try:
        post_id=post.objects.get(id=id)
    except post.DoesNotExist:
        return HttpResponse('post does not exist')
    if request.method == 'POST':
        image=request.POST.get('pic')
        new_comment=comment(author=request.user,image=image,post=post_id)
        serilaizer=commentcreateserializer(new_comment,data=request.data)
        if serializer.is_valid():
            serializer.save()
            return redirect(reverse(comments,args=[id]))
        messages.error(request,'cannot add comment right now')
        return redirect(reverse(comments,args=[id]))
    return HttpResponse('not a POST request')
@permission_classes(['IsAuthenticated'])
def update_comment(request,id):
    try:
        current_post=comment.objects.get(id=id)
    except comment.DoesNotExist:
        return HttpResponse('post does not exist')
    if request.method == 'POST':
        image=request.POST.get('pic')
        if current_post.author == request.author:
            new_comment=current_post(author=request.user,image=image,post=current_post.post)
            serilaizer=commentcreateserializer(new_comment,data=request.data)
            if serializer.is_valid():
                serializer.save()
                return redirect(reverse(comments,args=[id]))
            messages.error(request,'cannot update comment right now')
            return redirect(reverse(comments,args=[id]))
        messages.error(request,'permission denied')
        return redirect(reverse(comments,args=[id]))
    return render(request,'blog/comment_update.html')
def about(request):
    return render(request,'blog/about.html')


def destroy(request,id):
    try:
        delete_comment=comment.objects.get(id=id)
    except comment.DoesNotExist:
        return HttpResponse('Object does not exist')
    if delete_comment.author==request.user:
        messages.success(request,'Deleted successfully')
        return redirect(reverse(comments,args=[id]))
    else:
        messages.error(request,"Operation denied")
        return redirect('/')